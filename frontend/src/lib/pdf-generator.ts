import { jsPDF } from "jspdf";

export interface ReceiptData {
  proof: {
    proof_id: string;
    sha256: string;
    issued_at: string;
    signature: string;
    issuer: string;
  };
  delivery: {
    file_name: string;
    file_size_bytes?: number;
    delivered_at: string;
    delivered_by: string;
    project_name?: string;
  };
  acceptance?: {
    status: string;
    accepted_at?: string;
    accepted_by_ip?: string;
  };
}

export function generateProofReceiptPDF(data: ReceiptData): Buffer {
  const doc = new jsPDF();

  // Header
  doc.setFontSize(20);
  doc.text("PROOF OF DELIVERY", 105, 20, { align: "center" });

  doc.setFontSize(12);
  doc.text("Verifiable Receipt — Veris Platform", 105, 30, { align: "center" });

  // Proof Details
  doc.setFontSize(14);
  doc.text("Cryptographic Proof", 20, 50);

  doc.setFontSize(10);
  doc.text(`Proof ID: ${data.proof.proof_id}`, 20, 60);
  doc.text(`SHA-256 Hash: ${data.proof.sha256}`, 20, 67);
  doc.text(`Issued At: ${data.proof.issued_at}`, 20, 74);
  doc.text(`Issuer: ${data.proof.issuer}`, 20, 81);

  // Signature (split for readability)
  doc.text("Digital Signature:", 20, 88);
  const sigLines = splitText(data.proof.signature, 60);
  sigLines.forEach((line, i) => {
    doc.setFont("courier");
    doc.text(line, 25, 95 + i * 7);
  });
  doc.setFont("helvetica");

  // Delivery Details
  doc.setFontSize(14);
  doc.text("Delivery Details", 20, 120);

  doc.setFontSize(10);
  doc.text(`File Name: ${data.delivery.file_name}`, 20, 130);
  if (data.delivery.file_size_bytes) {
    doc.text(`File Size: ${formatBytes(data.delivery.file_size_bytes)}`, 20, 137);
  }
  doc.text(`Delivered By: ${data.delivery.delivered_by}`, 20, 144);
  doc.text(`Delivered At: ${data.delivery.delivered_at}`, 20, 151);
  if (data.delivery.project_name) {
    doc.text(`Project: ${data.delivery.project_name}`, 20, 158);
  }

  // Acceptance Details
  if (data.acceptance?.status === "accepted") {
    doc.setFontSize(14);
    doc.text("Acceptance Record", 20, 175);

    doc.setFontSize(10);
    doc.text(`Status: ${data.acceptance.status.toUpperCase()}`, 20, 185);
    if (data.acceptance.accepted_at) {
      doc.text(`Accepted At: ${data.acceptance.accepted_at}`, 20, 192);
    }
    if (data.acceptance.accepted_by_ip) {
      doc.text(`Accepted From IP: ${data.acceptance.accepted_by_ip}`, 20, 199);
    }
  }

  // Verification Instructions
  doc.setFontSize(14);
  doc.text("Verification", 20, 220);

  doc.setFontSize(10);
  doc.text("To independently verify this proof:", 20, 230);
  doc.text(
    `1. Visit: ${process.env.NEXT_PUBLIC_SITE_URL || "https://verisplatform.com"}/check`,
    20,
    237,
  );
  doc.text("2. Upload the original file or paste this receipt JSON", 20, 244);
  doc.text("3. System will verify hash and signature cryptographically", 20, 251);

  // Footer
  doc.setFontSize(8);
  doc.text("Generated by Veris — Verifiable Proof of Delivery", 105, 280, {
    align: "center",
  });
  doc.text(`Generated: ${new Date().toISOString()}`, 105, 285, {
    align: "center",
  });

  return Buffer.from(doc.output("arraybuffer"));
}

function splitText(text: string, maxLength: number): string[] {
  const result: string[] = [];
  for (let i = 0; i < text.length; i += maxLength) {
    result.push(text.slice(i, i + maxLength));
  }
  return result;
}

function formatBytes(bytes: number): string {
  if (bytes < 1024) return `${bytes} B`;
  if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(2)} KB`;
  if (bytes < 1024 * 1024 * 1024) return `${(bytes / (1024 * 1024)).toFixed(2)} MB`;
  return `${(bytes / (1024 * 1024 * 1024)).toFixed(2)} GB`;
}
