<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="68" failures="0" errors="0" time="0.778">
  <testsuite name="Telemetry Daily Aggregation" errors="0" failures="0" skipped="0" timestamp="2025-10-25T08:39:31" time="0.37" tests="4">
    <testcase classname="Telemetry Daily Aggregation should have basic functionality" name="Telemetry Daily Aggregation should have basic functionality" time="0.001">
    </testcase>
    <testcase classname="Telemetry Daily Aggregation should handle dry run mode" name="Telemetry Daily Aggregation should handle dry run mode" time="0.054">
    </testcase>
    <testcase classname="Telemetry Daily Aggregation should handle invalid date format" name="Telemetry Daily Aggregation should handle invalid date format" time="0.004">
    </testcase>
    <testcase classname="Telemetry Daily Aggregation should handle missing environment variables" name="Telemetry Daily Aggregation should handle missing environment variables" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Proof Schema v1" errors="0" failures="0" skipped="1" timestamp="2025-10-25T08:39:31" time="0.107" tests="9">
    <testcase classname="Proof Schema v1 createCanonicalProof should create a valid canonical proof" name="Proof Schema v1 createCanonicalProof should create a valid canonical proof" time="0.002">
    </testcase>
    <testcase classname="Proof Schema v1 createCanonicalProof should include required fields" name="Proof Schema v1 createCanonicalProof should include required fields" time="0">
    </testcase>
    <testcase classname="Proof Schema v1 canonicalizeAndSign should canonicalize and sign a proof" name="Proof Schema v1 canonicalizeAndSign should canonicalize and sign a proof" time="0">
    </testcase>
    <testcase classname="Proof Schema v1 validateCanonicalProof should validate a correct proof" name="Proof Schema v1 validateCanonicalProof should validate a correct proof" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Proof Schema v1 validateCanonicalProof should reject invalid proof structure" name="Proof Schema v1 validateCanonicalProof should reject invalid proof structure" time="0.001">
    </testcase>
    <testcase classname="Proof Schema v1 verifyCanonicalProof should verify a valid proof" name="Proof Schema v1 verifyCanonicalProof should verify a valid proof" time="0">
    </testcase>
    <testcase classname="Proof Schema v1 verifyCanonicalProof should reject proof with invalid signature" name="Proof Schema v1 verifyCanonicalProof should reject proof with invalid signature" time="0.001">
    </testcase>
    <testcase classname="Proof Schema v1 getCanonicalJsonString should return canonical JSON string" name="Proof Schema v1 getCanonicalJsonString should return canonical JSON string" time="0">
    </testcase>
    <testcase classname="Proof Schema v1 getCanonicalHash should return canonical hash" name="Proof Schema v1 getCanonicalHash should return canonical hash" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Proof API DTOs" errors="0" failures="0" skipped="0" timestamp="2025-10-25T08:39:31" time="0.087" tests="17">
    <testcase classname="Proof API DTOs CreateProofRequestSchema should validate valid request" name="Proof API DTOs CreateProofRequestSchema should validate valid request" time="0.002">
    </testcase>
    <testcase classname="Proof API DTOs CreateProofRequestSchema should reject request without file" name="Proof API DTOs CreateProofRequestSchema should reject request without file" time="0.005">
    </testcase>
    <testcase classname="Proof API DTOs CreateProofRequestSchema should reject request without user_id" name="Proof API DTOs CreateProofRequestSchema should reject request without user_id" time="0.002">
    </testcase>
    <testcase classname="Proof API DTOs CreateProofRequestSchema should accept request without optional project" name="Proof API DTOs CreateProofRequestSchema should accept request without optional project" time="0">
    </testcase>
    <testcase classname="Proof API DTOs CreateProofResponseSchema should validate valid response" name="Proof API DTOs CreateProofResponseSchema should validate valid response" time="0">
    </testcase>
    <testcase classname="Proof API DTOs CreateProofResponseSchema should reject response with invalid hash format" name="Proof API DTOs CreateProofResponseSchema should reject response with invalid hash format" time="0.001">
    </testcase>
    <testcase classname="Proof API DTOs CreateProofResponseSchema should reject response without required fields" name="Proof API DTOs CreateProofResponseSchema should reject response without required fields" time="0">
    </testcase>
    <testcase classname="Proof API DTOs CreateProofResponseSchema should accept response without optional url" name="Proof API DTOs CreateProofResponseSchema should accept response without optional url" time="0">
    </testcase>
    <testcase classname="Proof API DTOs ProofSubjectSchema should validate valid subject" name="Proof API DTOs ProofSubjectSchema should validate valid subject" time="0">
    </testcase>
    <testcase classname="Proof API DTOs ProofSubjectSchema should reject subject without required fields" name="Proof API DTOs ProofSubjectSchema should reject subject without required fields" time="0">
    </testcase>
    <testcase classname="Proof API DTOs ProofMetadataSchema should validate valid metadata" name="Proof API DTOs ProofMetadataSchema should validate valid metadata" time="0">
    </testcase>
    <testcase classname="Proof API DTOs ProofMetadataSchema should accept empty metadata" name="Proof API DTOs ProofMetadataSchema should accept empty metadata" time="0">
    </testcase>
    <testcase classname="Proof API DTOs CanonicalProofV1Schema should validate valid canonical proof" name="Proof API DTOs CanonicalProofV1Schema should validate valid canonical proof" time="0.001">
    </testcase>
    <testcase classname="Proof API DTOs CanonicalProofV1Schema should reject proof with invalid hash format" name="Proof API DTOs CanonicalProofV1Schema should reject proof with invalid hash format" time="0">
    </testcase>
    <testcase classname="Proof API DTOs CanonicalProofV1Schema should reject proof with wrong schema version" name="Proof API DTOs CanonicalProofV1Schema should reject proof with wrong schema version" time="0.001">
    </testcase>
    <testcase classname="Proof API DTOs Validation helper functions should validate CreateProofRequest using helper function" name="Proof API DTOs Validation helper functions should validate CreateProofRequest using helper function" time="0">
    </testcase>
    <testcase classname="Proof API DTOs Validation helper functions should validate CreateProofResponse using helper function" name="Proof API DTOs Validation helper functions should validate CreateProofResponse using helper function" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Billing Rules" errors="0" failures="0" skipped="0" timestamp="2025-10-25T08:39:31" time="0.057" tests="11">
    <testcase classname="Billing Rules shouldBill should bill for successful proof creation" name="Billing Rules shouldBill should bill for successful proof creation" time="0.001">
    </testcase>
    <testcase classname="Billing Rules shouldBill should not bill for failed proof creation" name="Billing Rules shouldBill should not bill for failed proof creation" time="0">
    </testcase>
    <testcase classname="Billing Rules shouldBill should not bill for proof verification (verification is free)" name="Billing Rules shouldBill should not bill for proof verification (verification is free)" time="0">
    </testcase>
    <testcase classname="Billing Rules shouldBill should not bill for failed proof verification" name="Billing Rules shouldBill should not bill for failed proof verification" time="0">
    </testcase>
    <testcase classname="Billing Rules shouldBill should not bill for unknown event types" name="Billing Rules shouldBill should not bill for unknown event types" time="0.002">
    </testcase>
    <testcase classname="Billing Rules shouldBill should not bill for events without proof ID" name="Billing Rules shouldBill should not bill for events without proof ID" time="0">
    </testcase>
    <testcase classname="Billing Rules getPricingRules should return all pricing rules" name="Billing Rules getPricingRules should return all pricing rules" time="0.002">
    </testcase>
    <testcase classname="Billing Rules getPricingRules should include rules for all event types" name="Billing Rules getPricingRules should include rules for all event types" time="0.001">
    </testcase>
    <testcase classname="Billing Rules getBillingSummary should calculate billing summary correctly" name="Billing Rules getBillingSummary should calculate billing summary correctly" time="0.001">
    </testcase>
    <testcase classname="Billing Rules getBillingSummary should handle empty events array" name="Billing Rules getBillingSummary should handle empty events array" time="0">
    </testcase>
    <testcase classname="Billing Rules Property-based testing should only bill for successful proof creation with proof ID" name="Billing Rules Property-based testing should only bill for successful proof creation with proof ID" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Verification Logic - Standalone Tests" errors="0" failures="0" skipped="0" timestamp="2025-10-25T08:39:31" time="0.057" tests="15">
    <testcase classname="Verification Logic - Standalone Tests Timestamp Validation should validate timestamp within tolerance window" name="Verification Logic - Standalone Tests Timestamp Validation should validate timestamp within tolerance window" time="0.001">
    </testcase>
    <testcase classname="Verification Logic - Standalone Tests Timestamp Validation should reject timestamp outside tolerance window" name="Verification Logic - Standalone Tests Timestamp Validation should reject timestamp outside tolerance window" time="0.001">
    </testcase>
    <testcase classname="Verification Logic - Standalone Tests Timestamp Validation should reject invalid timestamp format" name="Verification Logic - Standalone Tests Timestamp Validation should reject invalid timestamp format" time="0">
    </testcase>
    <testcase classname="Verification Logic - Standalone Tests Timestamp Validation should handle future timestamps correctly" name="Verification Logic - Standalone Tests Timestamp Validation should handle future timestamps correctly" time="0">
    </testcase>
    <testcase classname="Verification Logic - Standalone Tests Response Format Validation should return correct response format for valid proof" name="Verification Logic - Standalone Tests Response Format Validation should return correct response format for valid proof" time="0.001">
    </testcase>
    <testcase classname="Verification Logic - Standalone Tests Response Format Validation should return correct response format for invalid proof" name="Verification Logic - Standalone Tests Response Format Validation should return correct response format for invalid proof" time="0.001">
    </testcase>
    <testcase classname="Verification Logic - Standalone Tests Response Format Validation should return correct response format for missing proof" name="Verification Logic - Standalone Tests Response Format Validation should return correct response format for missing proof" time="0.002">
    </testcase>
    <testcase classname="Verification Logic - Standalone Tests Latency Measurement should measure latency in milliseconds" name="Verification Logic - Standalone Tests Latency Measurement should measure latency in milliseconds" time="0">
    </testcase>
    <testcase classname="Verification Logic - Standalone Tests Latency Measurement should handle zero latency" name="Verification Logic - Standalone Tests Latency Measurement should handle zero latency" time="0">
    </testcase>
    <testcase classname="Verification Logic - Standalone Tests Error Handling should handle multiple error conditions" name="Verification Logic - Standalone Tests Error Handling should handle multiple error conditions" time="0">
    </testcase>
    <testcase classname="Verification Logic - Standalone Tests Error Handling should handle no errors for valid proof" name="Verification Logic - Standalone Tests Error Handling should handle no errors for valid proof" time="0">
    </testcase>
    <testcase classname="Verification Logic - Standalone Tests Input Validation should validate hash format" name="Verification Logic - Standalone Tests Input Validation should validate hash format" time="0.001">
    </testcase>
    <testcase classname="Verification Logic - Standalone Tests Input Validation should validate file input" name="Verification Logic - Standalone Tests Input Validation should validate file input" time="0">
    </testcase>
    <testcase classname="Verification Logic - Standalone Tests Input Validation should validate request parameters" name="Verification Logic - Standalone Tests Input Validation should validate request parameters" time="0.001">
    </testcase>
    <testcase classname="Verification Logic - Standalone Tests Proof Structure Validation should validate canonical proof structure" name="Verification Logic - Standalone Tests Proof Structure Validation should validate canonical proof structure" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Security Headers" errors="0" failures="0" skipped="0" timestamp="2025-10-25T08:39:31" time="0.049" tests="12">
    <testcase classname="Security Headers Content Security Policy should have strict CSP configuration" name="Security Headers Content Security Policy should have strict CSP configuration" time="0.001">
    </testcase>
    <testcase classname="Security Headers Content Security Policy should allow necessary external resources" name="Security Headers Content Security Policy should allow necessary external resources" time="0">
    </testcase>
    <testcase classname="Security Headers Security Headers Configuration should have proper security headers" name="Security Headers Security Headers Configuration should have proper security headers" time="0.005">
    </testcase>
    <testcase classname="Security Headers Security Headers Configuration should have strict frame options" name="Security Headers Security Headers Configuration should have strict frame options" time="0">
    </testcase>
    <testcase classname="Security Headers Security Headers Configuration should prevent MIME type sniffing" name="Security Headers Security Headers Configuration should prevent MIME type sniffing" time="0">
    </testcase>
    <testcase classname="Security Headers Security Headers Configuration should have strict referrer policy" name="Security Headers Security Headers Configuration should have strict referrer policy" time="0">
    </testcase>
    <testcase classname="Security Headers Permissions Policy should restrict dangerous permissions" name="Security Headers Permissions Policy should restrict dangerous permissions" time="0.001">
    </testcase>
    <testcase classname="Security Headers HTTPS Configuration should enforce HTTPS" name="Security Headers HTTPS Configuration should enforce HTTPS" time="0">
    </testcase>
    <testcase classname="Security Headers HTTPS Configuration should have proper HSTS configuration" name="Security Headers HTTPS Configuration should have proper HSTS configuration" time="0">
    </testcase>
    <testcase classname="Security Headers Content Type Security should prevent content type sniffing" name="Security Headers Content Type Security should prevent content type sniffing" time="0">
    </testcase>
    <testcase classname="Security Headers Content Type Security should have proper content type validation" name="Security Headers Content Type Security should have proper content type validation" time="0">
    </testcase>
    <testcase classname="Security Headers CORS Configuration should have strict CORS policy" name="Security Headers CORS Configuration should have strict CORS policy" time="0">
    </testcase>
  </testsuite>
</testsuites>