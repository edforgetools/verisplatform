name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Force deployment even if tests fail"
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "10.18.1"
  STAGING_URL: "https://staging.verisplatform.com"

jobs:
  # Pre-deployment checks
  pre-deploy-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check deployment conditions
        id: check
        run: |
          # Check if this is a forced deployment
          if [ "${{ github.event.inputs.force_deploy }}" == "true" ]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "Forced deployment requested"
            exit 0
          fi

          # Check if develop branch has recent commits
          COMMITS_SINCE_LAST_DEPLOY=$(git log --oneline --since="1 hour ago" | wc -l)
          if [ $COMMITS_SINCE_LAST_DEPLOY -gt 0 ]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "Recent commits found, proceeding with deployment"
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "No recent commits, skipping deployment"
          fi

  # Quality gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.should_deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Type check
        run: pnpm --filter frontend run typecheck

      - name: Lint check
        run: pnpm --filter frontend run lint

      - name: Unit tests
        run: pnpm --filter frontend run test:ci
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_STRIPE_MODE: test
          CRON_JOB_TOKEN: ${{ secrets.STAGING_CRON_JOB_TOKEN }}
          STRIPE_SECRET_KEY: ${{ secrets.STAGING_STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STAGING_STRIPE_WEBHOOK_SECRET }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.STAGING_SUPABASE_SERVICE_KEY }}
          VERIS_SIGNING_PRIVATE_KEY: ${{ secrets.STAGING_VERIS_SIGNING_PRIVATE_KEY }}
          VERIS_SIGNING_PUBLIC_KEY: ${{ secrets.STAGING_VERIS_SIGNING_PUBLIC_KEY }}

      - name: Build application
        run: pnpm --filter frontend run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_STRIPE_MODE: test
          NEXT_PUBLIC_SITE_URL: ${{ env.STAGING_URL }}
          CRON_JOB_TOKEN: ${{ secrets.STAGING_CRON_JOB_TOKEN }}
          STRIPE_SECRET_KEY: ${{ secrets.STAGING_STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STAGING_STRIPE_WEBHOOK_SECRET }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.STAGING_SUPABASE_SERVICE_KEY }}
          VERIS_SIGNING_PRIVATE_KEY: ${{ secrets.STAGING_VERIS_SIGNING_PRIVATE_KEY }}
          VERIS_SIGNING_PUBLIC_KEY: ${{ secrets.STAGING_VERIS_SIGNING_PUBLIC_KEY }}

      - name: Build SDK
        run: pnpm --filter sdk-js run build

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, quality-gates]
    if: needs.pre-deploy-checks.outputs.should_deploy == 'true'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install

      - name: Build for staging
        run: pnpm --filter frontend run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_STRIPE_MODE: test
          NEXT_PUBLIC_SITE_URL: ${{ env.STAGING_URL }}
          CRON_JOB_TOKEN: ${{ secrets.STAGING_CRON_JOB_TOKEN }}
          STRIPE_SECRET_KEY: ${{ secrets.STAGING_STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STAGING_STRIPE_WEBHOOK_SECRET }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.STAGING_SUPABASE_SERVICE_KEY }}
          VERIS_SIGNING_PRIVATE_KEY: ${{ secrets.STAGING_VERIS_SIGNING_PRIVATE_KEY }}
          VERIS_SIGNING_PUBLIC_KEY: ${{ secrets.STAGING_VERIS_SIGNING_PUBLIC_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          REGISTRY_S3_BUCKET: ${{ secrets.STAGING_REGISTRY_S3_BUCKET }}
          ARWEAVE_WALLET: ${{ secrets.STAGING_ARWEAVE_WALLET }}

      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: "--prod=false"

      - name: Wait for deployment
        run: |
          echo "Waiting for staging deployment to be ready..."
          sleep 30

      - name: Health check
        run: |
          echo "Performing health check on staging deployment..."
          curl -f "${{ env.STAGING_URL }}/api/health" || exit 1
          echo "Staging deployment is healthy!"

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against staging..."
          # Basic smoke tests
          curl -f "${{ env.STAGING_URL }}/api/health" || exit 1
          curl -f "${{ env.STAGING_URL }}/api/db-health" || exit 1
          echo "Smoke tests passed!"

  # Post-deployment validation
  post-deploy-validation:
    name: Post-deployment Validation
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, deploy-staging]
    if: needs.pre-deploy-checks.outputs.should_deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright browsers
        run: pnpm --filter frontend exec playwright install --with-deps

      - name: Run staging E2E tests
        run: pnpm --filter frontend exec playwright test --config=playwright.config.staging.ts
        env:
          BASE_URL: ${{ env.STAGING_URL }}
          CI: true

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: staging-e2e-results
          path: frontend/test-results/
          retention-days: 7

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Staging deployment successful!"
            echo "üåê Staging URL: ${{ env.STAGING_URL }}"
          else
            echo "‚ùå Staging deployment failed!"
            exit 1
          fi
