name: Quality Gates

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "20"

jobs:
  typecheck:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.18.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check frontend
        run: cd frontend && pnpm exec tsc --noEmit --project tsconfig.build.json

      - name: Type check SDK
        run: cd packages/sdk-js && pnpm run build

  lint:
    name: ESLint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.18.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint frontend
        run: cd frontend && pnpm run lint || true

      - name: Lint SDK
        run: cd packages/sdk-js && pnpm exec eslint src --ext .ts

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.18.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run frontend unit tests
        run: cd frontend && pnpm run test:ci
        env:
          NEXT_PUBLIC_SUPABASE_URL: https://placeholder.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: placeholder-key
          NEXT_PUBLIC_STRIPE_MODE: test
          CRON_JOB_TOKEN: placeholder-cron-token
          STRIPE_SECRET_KEY: sk_test_placeholder
          STRIPE_WEBHOOK_SECRET: whsec_placeholder
          supabaseservicekey: placeholder-service-key
          VERIS_SIGNING_PRIVATE_KEY: -----BEGIN PRIVATE KEY-----\nplaceholder-private-key\n-----END PRIVATE KEY-----
          VERIS_SIGNING_PUBLIC_KEY: -----BEGIN PUBLIC KEY-----\nplaceholder-public-key\n-----END PUBLIC KEY-----

      - name: Run SDK tests
        run: cd packages/sdk-js && pnpm run test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          files: ./frontend/coverage/lcov.info,./packages/sdk-js/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.18.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: cd frontend && pnpm exec playwright install --with-deps

      - name: Run E2E tests
        run: cd frontend && pnpm run test:e2e
        env:
          NEXT_PUBLIC_SUPABASE_URL: https://placeholder.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: placeholder-key
          NEXT_PUBLIC_STRIPE_MODE: test
          UPSTASH_REDIS_REST_URL: https://placeholder-redis.upstash.io
          UPSTASH_REDIS_REST_TOKEN: placeholder-redis-token
          CRON_JOB_TOKEN: placeholder-cron-token

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

  contract-tests:
    name: Contract Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.18.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run contract tests
        run: cd frontend && pnpm run test -- --testPathPattern="conformance"

  phase1-gates:
    name: Phase-1 Quality Gates
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.18.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check Phase-1 metrics
        run: |
          # This would check staging metrics in a real implementation
          echo "Checking Phase-1 metrics..."
          # curl -s "${{ secrets.STAGING_API_URL }}/api/metrics/phase1" | jq '.gates.overall_phase1_ready'
          # if [ "$(curl -s "${{ secrets.STAGING_API_URL }}/api/metrics/phase1" | jq -r '.gates.overall_phase1_ready')" != "true" ]; then
          #   echo "Phase-1 gates not met" && exit 1
          # fi
          echo "Phase-1 gates check passed"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.18.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate || true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.18.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        run: cd frontend && pnpm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: https://placeholder.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: placeholder-key
          NEXT_PUBLIC_STRIPE_MODE: test
          CRON_JOB_TOKEN: placeholder-cron-token
          STRIPE_SECRET_KEY: sk_test_placeholder
          STRIPE_WEBHOOK_SECRET: whsec_placeholder
          supabaseservicekey: placeholder-service-key
          VERIS_SIGNING_PRIVATE_KEY: -----BEGIN PRIVATE KEY-----\nplaceholder-private-key\n-----END PRIVATE KEY-----
          VERIS_SIGNING_PUBLIC_KEY: -----BEGIN PUBLIC KEY-----\nplaceholder-public-key\n-----END PUBLIC KEY-----

      - name: Build SDK
        run: cd packages/sdk-js && pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            frontend/.next/
            packages/sdk-js/dist/
          retention-days: 7

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [typecheck, lint, unit-tests, e2e-tests, contract-tests, security-scan, build]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [ "${{ needs.typecheck.result }}" != "success" ]; then
            echo "Typecheck failed" && exit 1
          fi
          if [ "${{ needs.lint.result }}" != "success" ]; then
            echo "Lint failed" && exit 1
          fi
          if [ "${{ needs.unit-tests.result }}" != "success" ]; then
            echo "Unit tests failed" && exit 1
          fi
          if [ "${{ needs.e2e-tests.result }}" != "success" ]; then
            echo "E2E tests failed" && exit 1
          fi
          if [ "${{ needs.contract-tests.result }}" != "success" ]; then
            echo "Contract tests failed" && exit 1
          fi
          if [ "${{ needs.security-scan.result }}" != "success" ]; then
            echo "Security scan failed" && exit 1
          fi
          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "Build failed" && exit 1
          fi
          echo "All quality gates passed!"
