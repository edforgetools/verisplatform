name: E2E Tests on Preview

on:
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "10.18.1"

jobs:
  e2e-preview:
    name: E2E Tests on Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm --filter frontend exec playwright install --with-deps

      - name: Wait for preview deployment
        if: github.event_name == 'pull_request'
        run: |
          echo "Waiting for preview deployment to be ready..."
          sleep 30

      - name: Get preview URL
        if: github.event_name == 'pull_request'
        id: preview-url
        run: |
          # Extract preview URL from Vercel deployment
          # This assumes Vercel is configured with automatic preview deployments
          PREVIEW_URL="https://veris-git-${GITHUB_HEAD_REF,,}-${GITHUB_REPOSITORY_OWNER}.vercel.app"
          echo "url=$PREVIEW_URL" >> $GITHUB_OUTPUT
          echo "Preview URL: $PREVIEW_URL"

      - name: Run E2E tests against preview
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            PREVIEW_URL="${{ steps.preview-url.outputs.url }}"
            echo "Running E2E tests against preview: $PREVIEW_URL"
            pnpm --filter frontend exec playwright test --config=playwright.config.preview.ts --base-url="$PREVIEW_URL"
          else
            echo "Running E2E tests against localhost"
            pnpm --filter frontend run test:e2e
          fi
        env:
          CI: true
          PREVIEW_URL: ${{ steps.preview-url.outputs.url }}

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-preview-results
          path: frontend/test-results/

      - name: Comment PR with test results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            let comment = '## üß™ E2E Test Results\n\n';

            // Check if test results exist
            const resultsPath = 'frontend/test-results/junit.xml';
            if (fs.existsSync(resultsPath)) {
              try {
                const results = fs.readFileSync(resultsPath, 'utf8');
                const passMatch = results.match(/tests="(\d+)" failures="(\d+)" errors="(\d+)"/);
                
                if (passMatch) {
                  const total = parseInt(passMatch[1]);
                  const failures = parseInt(passMatch[2]);
                  const errors = parseInt(passMatch[3]);
                  const passed = total - failures - errors;
                  
                  if (failures === 0 && errors === 0) {
                    comment += '‚úÖ **All E2E tests passed!**\n\n';
                    comment += `- ‚úÖ ${passed} tests passed\n`;
                    comment += `- ‚ùå ${failures} tests failed\n`;
                    comment += `- ‚ö†Ô∏è ${errors} tests errored\n\n`;
                  } else {
                    comment += '‚ùå **Some E2E tests failed**\n\n';
                    comment += `- ‚úÖ ${passed} tests passed\n`;
                    comment += `- ‚ùå ${failures} tests failed\n`;
                    comment += `- ‚ö†Ô∏è ${errors} tests errored\n\n`;
                  }
                } else {
                  comment += '‚ö†Ô∏è **Could not parse test results**\n\n';
                }
              } catch (error) {
                comment += '‚ö†Ô∏è **Error reading test results**\n\n';
              }
            } else {
              comment += '‚ö†Ô∏è **No test results found**\n\n';
            }

            comment += 'Check the [Actions tab](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed results.\n';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
